name: Extract Settings APK

on:
  workflow_dispatch:
    inputs:
      firmware_url:
        description: 'URL to the firmware zip file'
        required: true
        default: 'https://example.com/firmware.zip_or_tgz'

jobs:
  extract-apk:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          wget \
          tar \
          unzip \
          android-sdk-libsparse-utils \
          erofs-utils
        wget https://github.com/ssut/payload-dumper-go/releases/download/1.2.2/payload-dumper-go_1.2.2_linux_amd64.tar.gz
        mkdir ./dumper
        tar -xzvf payload-dumper-go_1.2.2_linux_amd64.tar.gz -C ./dumper
        chmod +x ./dumper/payload-dumper-go

    - name: Download firmware
      run: |
        wget ${{ github.event.inputs.firmware_url }}
        FILENAME=$(ls -t | head -n1)
        echo "Downloaded file: $FILENAME"

    - name: Check files in archive
      run: |
        find_file_in_archive() {
          local archive=$1
          local filename=$2
          tar -tvf "$archive" | grep "$FILENAME" | awk '{print $6}'
        }

        FILE_PATH=$(find_file_in_archive "$FILENAME" "super.img")
        echo $FILE_PATH

        if [ -z "$FILE_PATH" ]; then
          FILE_PATH=$(find_file_in_archive "$FILENAME" "payload.bin")
          echo $FILE_PATH
        fi

        if [ -n "$FILE_PATH" ]; then
          echo "Extract file: $FILE_PATH"
          tar --strip-components=$(echo "$FILE_PATH" | grep -o "/" | wc -l) -xvf "$FILENAME" "$FILE_PATH"
          ls -Alt
        else
          echo "Files not found"
          exit 1
        fi
    - name: Convert sparse image (if needed)
      run: |
        if file ./system_ext.img | grep -q "sparse"; then
          simg2img ./system_ext.img ./converted.img
        else
          cp ./system_ext.img ./converted.img
        fi

    - name: Mount image
      run: |
        mkdir -p /mnt/super_img
        sudo mount -o loop ./converted.img /mnt/super_img
        if [[ -f /mnt/super_img/system_ext_a.img ]]; then
          echo "Found system_ext_a.img"
          mkdir -p /mnt/system_ext
          sudo mount -o loop /mnt/super_img/system_ext_a.img /mnt/system_ext
          
          cp /mnt/system_ext/priv-app/Settings/Settings.apk ./settings.apk
        fi
        else
          echo "Can't find files"
          exit 1
        fi

    - name: Parse settings name
      run: |
        code_name=$(echo "$FILENAME" | sed -E 's/miui_([A-Za-z]+)[^_]*.*/\1/')
        region=$(echo "$FILENAME" | sed -E 's/.*_OS[0-9]+\.[0-9]+\.[0-9]+\.[A-Z]+([[:alpha:]]{2,3}).*/\1/')
        rom_code=$(echo "$FILENAME" | sed -E 's/.*_OS([0-9]+\.[0-9]+\.[0-9]+\.[A-Z0-9]+).*/\1/')
        new_file_name="Settings_${code_name}_${region}_from_OS${rom_code}.apk"
        echo "$new_file_name"

    - name: Upload settings.apk
      uses: actions/upload-artifact@v3
      with:
        name: $new_file_name
        path: ./settings.apk
